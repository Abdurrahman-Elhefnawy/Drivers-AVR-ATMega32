
TIMERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000922  2**0
                  ALLOC
  2 .stab         00000af8  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008df  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 13 04 	call	0x826	; 0x826 <main>
  74:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setPinDirection>:
 */
#include"dio_interface.h"


void DIO_setPinDirection(u8 portNumber , u8 pinNumber, u8 pinDirection)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_setPinDirection+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <DIO_setPinDirection+0x8>
  84:	0f 92       	push	r0
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	89 83       	std	Y+1, r24	; 0x01
  8c:	6a 83       	std	Y+2, r22	; 0x02
  8e:	4b 83       	std	Y+3, r20	; 0x03
	switch(portNumber)
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	28 2f       	mov	r18, r24
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	3d 83       	std	Y+5, r19	; 0x05
  98:	2c 83       	std	Y+4, r18	; 0x04
  9a:	8c 81       	ldd	r24, Y+4	; 0x04
  9c:	9d 81       	ldd	r25, Y+5	; 0x05
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	91 05       	cpc	r25, r1
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_setPinDirection+0x2a>
  a4:	47 c0       	rjmp	.+142    	; 0x134 <DIO_setPinDirection+0xb8>
  a6:	2c 81       	ldd	r18, Y+4	; 0x04
  a8:	3d 81       	ldd	r19, Y+5	; 0x05
  aa:	22 30       	cpi	r18, 0x02	; 2
  ac:	31 05       	cpc	r19, r1
  ae:	2c f4       	brge	.+10     	; 0xba <DIO_setPinDirection+0x3e>
  b0:	8c 81       	ldd	r24, Y+4	; 0x04
  b2:	9d 81       	ldd	r25, Y+5	; 0x05
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	71 f0       	breq	.+28     	; 0xd4 <DIO_setPinDirection+0x58>
  b8:	cb c0       	rjmp	.+406    	; 0x250 <DIO_setPinDirection+0x1d4>
  ba:	2c 81       	ldd	r18, Y+4	; 0x04
  bc:	3d 81       	ldd	r19, Y+5	; 0x05
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	31 05       	cpc	r19, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <DIO_setPinDirection+0x4a>
  c4:	67 c0       	rjmp	.+206    	; 0x194 <DIO_setPinDirection+0x118>
  c6:	8c 81       	ldd	r24, Y+4	; 0x04
  c8:	9d 81       	ldd	r25, Y+5	; 0x05
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	91 05       	cpc	r25, r1
  ce:	09 f4       	brne	.+2      	; 0xd2 <DIO_setPinDirection+0x56>
  d0:	91 c0       	rjmp	.+290    	; 0x1f4 <DIO_setPinDirection+0x178>
  d2:	be c0       	rjmp	.+380    	; 0x250 <DIO_setPinDirection+0x1d4>
	{
	case PORT_A:
		if(pinDirection == OUTPUT)
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	a1 f4       	brne	.+40     	; 0x102 <DIO_setPinDirection+0x86>
			SET_BIT(DDRA_REG,pinNumber);
  da:	aa e3       	ldi	r26, 0x3A	; 58
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	ea e3       	ldi	r30, 0x3A	; 58
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 2e       	mov	r0, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setPinDirection+0x7c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setPinDirection+0x78>
  fc:	84 2b       	or	r24, r20
  fe:	8c 93       	st	X, r24
 100:	a7 c0       	rjmp	.+334    	; 0x250 <DIO_setPinDirection+0x1d4>
		else if(pinDirection == INPUT)
 102:	8b 81       	ldd	r24, Y+3	; 0x03
 104:	88 23       	and	r24, r24
 106:	09 f0       	breq	.+2      	; 0x10a <DIO_setPinDirection+0x8e>
 108:	a3 c0       	rjmp	.+326    	; 0x250 <DIO_setPinDirection+0x1d4>
			CLR_BIT(DDRA_REG,pinNumber);
 10a:	aa e3       	ldi	r26, 0x3A	; 58
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	ea e3       	ldi	r30, 0x3A	; 58
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	48 2f       	mov	r20, r24
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_setPinDirection+0xac>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_setPinDirection+0xa8>
 12c:	80 95       	com	r24
 12e:	84 23       	and	r24, r20
 130:	8c 93       	st	X, r24
 132:	8e c0       	rjmp	.+284    	; 0x250 <DIO_setPinDirection+0x1d4>
		break;
	case PORT_B:
		if(pinDirection == OUTPUT)
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	a1 f4       	brne	.+40     	; 0x162 <DIO_setPinDirection+0xe6>
			SET_BIT(DDRB_REG,pinNumber);
 13a:	a7 e3       	ldi	r26, 0x37	; 55
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e7 e3       	ldi	r30, 0x37	; 55
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	48 2f       	mov	r20, r24
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 2e       	mov	r0, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_setPinDirection+0xdc>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_setPinDirection+0xd8>
 15c:	84 2b       	or	r24, r20
 15e:	8c 93       	st	X, r24
 160:	77 c0       	rjmp	.+238    	; 0x250 <DIO_setPinDirection+0x1d4>
		else if(pinDirection == INPUT)
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	88 23       	and	r24, r24
 166:	09 f0       	breq	.+2      	; 0x16a <DIO_setPinDirection+0xee>
 168:	73 c0       	rjmp	.+230    	; 0x250 <DIO_setPinDirection+0x1d4>
			CLR_BIT(DDRB_REG,pinNumber);
 16a:	a7 e3       	ldi	r26, 0x37	; 55
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e7 e3       	ldi	r30, 0x37	; 55
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 2e       	mov	r0, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_setPinDirection+0x10c>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_setPinDirection+0x108>
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	8c 93       	st	X, r24
 192:	5e c0       	rjmp	.+188    	; 0x250 <DIO_setPinDirection+0x1d4>
		break;
	case PORT_C:
		if(pinDirection == OUTPUT)
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	a1 f4       	brne	.+40     	; 0x1c2 <DIO_setPinDirection+0x146>
			SET_BIT(DDRC_REG,pinNumber);
 19a:	a4 e3       	ldi	r26, 0x34	; 52
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	e4 e3       	ldi	r30, 0x34	; 52
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	48 2f       	mov	r20, r24
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	28 2f       	mov	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 2e       	mov	r0, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setPinDirection+0x13c>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setPinDirection+0x138>
 1bc:	84 2b       	or	r24, r20
 1be:	8c 93       	st	X, r24
 1c0:	47 c0       	rjmp	.+142    	; 0x250 <DIO_setPinDirection+0x1d4>
		else if(pinDirection == INPUT)
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	88 23       	and	r24, r24
 1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_setPinDirection+0x14e>
 1c8:	43 c0       	rjmp	.+134    	; 0x250 <DIO_setPinDirection+0x1d4>
			CLR_BIT(DDRC_REG,pinNumber);
 1ca:	a4 e3       	ldi	r26, 0x34	; 52
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	e4 e3       	ldi	r30, 0x34	; 52
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	48 2f       	mov	r20, r24
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	28 2f       	mov	r18, r24
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 2e       	mov	r0, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_setPinDirection+0x16c>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_setPinDirection+0x168>
 1ec:	80 95       	com	r24
 1ee:	84 23       	and	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	2e c0       	rjmp	.+92     	; 0x250 <DIO_setPinDirection+0x1d4>
		break;
	case PORT_D:
		if(pinDirection == OUTPUT)
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	a1 f4       	brne	.+40     	; 0x222 <DIO_setPinDirection+0x1a6>
			SET_BIT(DDRD_REG,pinNumber);
 1fa:	a1 e3       	ldi	r26, 0x31	; 49
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	e1 e3       	ldi	r30, 0x31	; 49
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	48 2f       	mov	r20, r24
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	28 2f       	mov	r18, r24
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 2e       	mov	r0, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_setPinDirection+0x19c>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_setPinDirection+0x198>
 21c:	84 2b       	or	r24, r20
 21e:	8c 93       	st	X, r24
 220:	17 c0       	rjmp	.+46     	; 0x250 <DIO_setPinDirection+0x1d4>
		else if(pinDirection == INPUT)
 222:	8b 81       	ldd	r24, Y+3	; 0x03
 224:	88 23       	and	r24, r24
 226:	a1 f4       	brne	.+40     	; 0x250 <DIO_setPinDirection+0x1d4>
			CLR_BIT(DDRD_REG,pinNumber);
 228:	a1 e3       	ldi	r26, 0x31	; 49
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	e1 e3       	ldi	r30, 0x31	; 49
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	48 2f       	mov	r20, r24
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_setPinDirection+0x1ca>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_setPinDirection+0x1c6>
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	8c 93       	st	X, r24
		break;
	}
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	cf 91       	pop	r28
 25c:	df 91       	pop	r29
 25e:	08 95       	ret

00000260 <DIO_setPinValue>:



void DIO_setPinValue(u8 portNumber , u8 pinNumber , u8 pinValue)
{
 260:	df 93       	push	r29
 262:	cf 93       	push	r28
 264:	00 d0       	rcall	.+0      	; 0x266 <DIO_setPinValue+0x6>
 266:	00 d0       	rcall	.+0      	; 0x268 <DIO_setPinValue+0x8>
 268:	0f 92       	push	r0
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	6a 83       	std	Y+2, r22	; 0x02
 272:	4b 83       	std	Y+3, r20	; 0x03
	switch(portNumber)
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	28 2f       	mov	r18, r24
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	3d 83       	std	Y+5, r19	; 0x05
 27c:	2c 83       	std	Y+4, r18	; 0x04
 27e:	8c 81       	ldd	r24, Y+4	; 0x04
 280:	9d 81       	ldd	r25, Y+5	; 0x05
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	91 05       	cpc	r25, r1
 286:	09 f4       	brne	.+2      	; 0x28a <DIO_setPinValue+0x2a>
 288:	47 c0       	rjmp	.+142    	; 0x318 <DIO_setPinValue+0xb8>
 28a:	2c 81       	ldd	r18, Y+4	; 0x04
 28c:	3d 81       	ldd	r19, Y+5	; 0x05
 28e:	22 30       	cpi	r18, 0x02	; 2
 290:	31 05       	cpc	r19, r1
 292:	2c f4       	brge	.+10     	; 0x29e <DIO_setPinValue+0x3e>
 294:	8c 81       	ldd	r24, Y+4	; 0x04
 296:	9d 81       	ldd	r25, Y+5	; 0x05
 298:	00 97       	sbiw	r24, 0x00	; 0
 29a:	71 f0       	breq	.+28     	; 0x2b8 <DIO_setPinValue+0x58>
 29c:	cb c0       	rjmp	.+406    	; 0x434 <DIO_setPinValue+0x1d4>
 29e:	2c 81       	ldd	r18, Y+4	; 0x04
 2a0:	3d 81       	ldd	r19, Y+5	; 0x05
 2a2:	22 30       	cpi	r18, 0x02	; 2
 2a4:	31 05       	cpc	r19, r1
 2a6:	09 f4       	brne	.+2      	; 0x2aa <DIO_setPinValue+0x4a>
 2a8:	67 c0       	rjmp	.+206    	; 0x378 <DIO_setPinValue+0x118>
 2aa:	8c 81       	ldd	r24, Y+4	; 0x04
 2ac:	9d 81       	ldd	r25, Y+5	; 0x05
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	91 05       	cpc	r25, r1
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <DIO_setPinValue+0x56>
 2b4:	91 c0       	rjmp	.+290    	; 0x3d8 <DIO_setPinValue+0x178>
 2b6:	be c0       	rjmp	.+380    	; 0x434 <DIO_setPinValue+0x1d4>
	{
	case PORT_A:
		if(pinValue == HIGH)
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	a1 f4       	brne	.+40     	; 0x2e6 <DIO_setPinValue+0x86>
			SET_BIT(PORTA_REG,pinNumber);
 2be:	ab e3       	ldi	r26, 0x3B	; 59
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	eb e3       	ldi	r30, 0x3B	; 59
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_setPinValue+0x7c>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_setPinValue+0x78>
 2e0:	84 2b       	or	r24, r20
 2e2:	8c 93       	st	X, r24
 2e4:	a7 c0       	rjmp	.+334    	; 0x434 <DIO_setPinValue+0x1d4>
		else if(pinValue == LOW)
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	88 23       	and	r24, r24
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_setPinValue+0x8e>
 2ec:	a3 c0       	rjmp	.+326    	; 0x434 <DIO_setPinValue+0x1d4>
			CLR_BIT(PORTA_REG,pinNumber);
 2ee:	ab e3       	ldi	r26, 0x3B	; 59
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	eb e3       	ldi	r30, 0x3B	; 59
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	48 2f       	mov	r20, r24
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	28 2f       	mov	r18, r24
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 2e       	mov	r0, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_setPinValue+0xac>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	0a 94       	dec	r0
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_setPinValue+0xa8>
 310:	80 95       	com	r24
 312:	84 23       	and	r24, r20
 314:	8c 93       	st	X, r24
 316:	8e c0       	rjmp	.+284    	; 0x434 <DIO_setPinValue+0x1d4>
		break;
	case PORT_B:
		if(pinValue == HIGH)
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	a1 f4       	brne	.+40     	; 0x346 <DIO_setPinValue+0xe6>
			SET_BIT(PORTB_REG,pinNumber);
 31e:	a8 e3       	ldi	r26, 0x38	; 56
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e8 e3       	ldi	r30, 0x38	; 56
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_setPinValue+0xdc>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_setPinValue+0xd8>
 340:	84 2b       	or	r24, r20
 342:	8c 93       	st	X, r24
 344:	77 c0       	rjmp	.+238    	; 0x434 <DIO_setPinValue+0x1d4>
		else if(pinValue == LOW)
 346:	8b 81       	ldd	r24, Y+3	; 0x03
 348:	88 23       	and	r24, r24
 34a:	09 f0       	breq	.+2      	; 0x34e <DIO_setPinValue+0xee>
 34c:	73 c0       	rjmp	.+230    	; 0x434 <DIO_setPinValue+0x1d4>
			CLR_BIT(PORTB_REG,pinNumber);
 34e:	a8 e3       	ldi	r26, 0x38	; 56
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e8 e3       	ldi	r30, 0x38	; 56
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	8a 81       	ldd	r24, Y+2	; 0x02
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_setPinValue+0x10c>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_setPinValue+0x108>
 370:	80 95       	com	r24
 372:	84 23       	and	r24, r20
 374:	8c 93       	st	X, r24
 376:	5e c0       	rjmp	.+188    	; 0x434 <DIO_setPinValue+0x1d4>
		break;
	case PORT_C:
		if(pinValue == HIGH)
 378:	8b 81       	ldd	r24, Y+3	; 0x03
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	a1 f4       	brne	.+40     	; 0x3a6 <DIO_setPinValue+0x146>
			SET_BIT(PORTC_REG,pinNumber);
 37e:	a5 e3       	ldi	r26, 0x35	; 53
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	e5 e3       	ldi	r30, 0x35	; 53
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	48 2f       	mov	r20, r24
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	28 2f       	mov	r18, r24
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 2e       	mov	r0, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_setPinValue+0x13c>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_setPinValue+0x138>
 3a0:	84 2b       	or	r24, r20
 3a2:	8c 93       	st	X, r24
 3a4:	47 c0       	rjmp	.+142    	; 0x434 <DIO_setPinValue+0x1d4>
		else if(pinValue == LOW)
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	88 23       	and	r24, r24
 3aa:	09 f0       	breq	.+2      	; 0x3ae <DIO_setPinValue+0x14e>
 3ac:	43 c0       	rjmp	.+134    	; 0x434 <DIO_setPinValue+0x1d4>
			CLR_BIT(PORTC_REG,pinNumber);
 3ae:	a5 e3       	ldi	r26, 0x35	; 53
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	e5 e3       	ldi	r30, 0x35	; 53
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	48 2f       	mov	r20, r24
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 2e       	mov	r0, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_setPinValue+0x16c>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_setPinValue+0x168>
 3d0:	80 95       	com	r24
 3d2:	84 23       	and	r24, r20
 3d4:	8c 93       	st	X, r24
 3d6:	2e c0       	rjmp	.+92     	; 0x434 <DIO_setPinValue+0x1d4>
		break;
	case PORT_D:
		if(pinValue == HIGH)
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	a1 f4       	brne	.+40     	; 0x406 <DIO_setPinValue+0x1a6>
			SET_BIT(PORTD_REG,pinNumber);
 3de:	a2 e3       	ldi	r26, 0x32	; 50
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e2 e3       	ldi	r30, 0x32	; 50
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_setPinValue+0x19c>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_setPinValue+0x198>
 400:	84 2b       	or	r24, r20
 402:	8c 93       	st	X, r24
 404:	17 c0       	rjmp	.+46     	; 0x434 <DIO_setPinValue+0x1d4>
		else if(pinValue == LOW)
 406:	8b 81       	ldd	r24, Y+3	; 0x03
 408:	88 23       	and	r24, r24
 40a:	a1 f4       	brne	.+40     	; 0x434 <DIO_setPinValue+0x1d4>
			CLR_BIT(PORTD_REG,pinNumber);
 40c:	a2 e3       	ldi	r26, 0x32	; 50
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	e2 e3       	ldi	r30, 0x32	; 50
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 2e       	mov	r0, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_setPinValue+0x1ca>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	0a 94       	dec	r0
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_setPinValue+0x1c6>
 42e:	80 95       	com	r24
 430:	84 23       	and	r24, r20
 432:	8c 93       	st	X, r24
		break;
	}

}
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	cf 91       	pop	r28
 440:	df 91       	pop	r29
 442:	08 95       	ret

00000444 <DIO_setInternalPullUp>:


void DIO_setInternalPullUp(u8 portNumber , u8 pinNumber)
{
 444:	df 93       	push	r29
 446:	cf 93       	push	r28
 448:	00 d0       	rcall	.+0      	; 0x44a <DIO_setInternalPullUp+0x6>
 44a:	00 d0       	rcall	.+0      	; 0x44c <DIO_setInternalPullUp+0x8>
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	6a 83       	std	Y+2, r22	; 0x02
	switch(portNumber)
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	3c 83       	std	Y+4, r19	; 0x04
 45c:	2b 83       	std	Y+3, r18	; 0x03
 45e:	8b 81       	ldd	r24, Y+3	; 0x03
 460:	9c 81       	ldd	r25, Y+4	; 0x04
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	91 05       	cpc	r25, r1
 466:	49 f1       	breq	.+82     	; 0x4ba <__stack+0x5b>
 468:	2b 81       	ldd	r18, Y+3	; 0x03
 46a:	3c 81       	ldd	r19, Y+4	; 0x04
 46c:	22 30       	cpi	r18, 0x02	; 2
 46e:	31 05       	cpc	r19, r1
 470:	2c f4       	brge	.+10     	; 0x47c <__stack+0x1d>
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	9c 81       	ldd	r25, Y+4	; 0x04
 476:	00 97       	sbiw	r24, 0x00	; 0
 478:	61 f0       	breq	.+24     	; 0x492 <__stack+0x33>
 47a:	5a c0       	rjmp	.+180    	; 0x530 <__stack+0xd1>
 47c:	2b 81       	ldd	r18, Y+3	; 0x03
 47e:	3c 81       	ldd	r19, Y+4	; 0x04
 480:	22 30       	cpi	r18, 0x02	; 2
 482:	31 05       	cpc	r19, r1
 484:	71 f1       	breq	.+92     	; 0x4e2 <__stack+0x83>
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	9c 81       	ldd	r25, Y+4	; 0x04
 48a:	83 30       	cpi	r24, 0x03	; 3
 48c:	91 05       	cpc	r25, r1
 48e:	e9 f1       	breq	.+122    	; 0x50a <__stack+0xab>
 490:	4f c0       	rjmp	.+158    	; 0x530 <__stack+0xd1>
	{
	case PORT_A:
			SET_BIT(PORTA_REG,pinNumber);
 492:	ab e3       	ldi	r26, 0x3B	; 59
 494:	b0 e0       	ldi	r27, 0x00	; 0
 496:	eb e3       	ldi	r30, 0x3B	; 59
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	48 2f       	mov	r20, r24
 49e:	8a 81       	ldd	r24, Y+2	; 0x02
 4a0:	28 2f       	mov	r18, r24
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 2e       	mov	r0, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__stack+0x51>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	0a 94       	dec	r0
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__stack+0x4d>
 4b4:	84 2b       	or	r24, r20
 4b6:	8c 93       	st	X, r24
 4b8:	3b c0       	rjmp	.+118    	; 0x530 <__stack+0xd1>
		break;
	case PORT_B:
			SET_BIT(PORTB_REG,pinNumber);
 4ba:	a8 e3       	ldi	r26, 0x38	; 56
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	e8 e3       	ldi	r30, 0x38	; 56
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	48 2f       	mov	r20, r24
 4c6:	8a 81       	ldd	r24, Y+2	; 0x02
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 2e       	mov	r0, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__stack+0x79>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <__stack+0x75>
 4dc:	84 2b       	or	r24, r20
 4de:	8c 93       	st	X, r24
 4e0:	27 c0       	rjmp	.+78     	; 0x530 <__stack+0xd1>
		break;
	case PORT_C:
			SET_BIT(PORTC_REG,pinNumber);
 4e2:	a5 e3       	ldi	r26, 0x35	; 53
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e5 e3       	ldi	r30, 0x35	; 53
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	48 2f       	mov	r20, r24
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 2e       	mov	r0, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <__stack+0xa1>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <__stack+0x9d>
 504:	84 2b       	or	r24, r20
 506:	8c 93       	st	X, r24
 508:	13 c0       	rjmp	.+38     	; 0x530 <__stack+0xd1>
		break;
	case PORT_D:
			SET_BIT(PORTD_REG,pinNumber);
 50a:	a2 e3       	ldi	r26, 0x32	; 50
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	e2 e3       	ldi	r30, 0x32	; 50
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	48 2f       	mov	r20, r24
 516:	8a 81       	ldd	r24, Y+2	; 0x02
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 2e       	mov	r0, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <__stack+0xc9>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	0a 94       	dec	r0
 52a:	e2 f7       	brpl	.-8      	; 0x524 <__stack+0xc5>
 52c:	84 2b       	or	r24, r20
 52e:	8c 93       	st	X, r24
		break;
	}

}
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
 538:	cf 91       	pop	r28
 53a:	df 91       	pop	r29
 53c:	08 95       	ret

0000053e <DIO_setPortDirection>:




void DIO_setPortDirection(u8 portNumber , u8 portDirection)
{
 53e:	df 93       	push	r29
 540:	cf 93       	push	r28
 542:	00 d0       	rcall	.+0      	; 0x544 <DIO_setPortDirection+0x6>
 544:	00 d0       	rcall	.+0      	; 0x546 <DIO_setPortDirection+0x8>
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
 54a:	89 83       	std	Y+1, r24	; 0x01
 54c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portNumber)
 54e:	89 81       	ldd	r24, Y+1	; 0x01
 550:	28 2f       	mov	r18, r24
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	3c 83       	std	Y+4, r19	; 0x04
 556:	2b 83       	std	Y+3, r18	; 0x03
 558:	8b 81       	ldd	r24, Y+3	; 0x03
 55a:	9c 81       	ldd	r25, Y+4	; 0x04
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	91 05       	cpc	r25, r1
 560:	21 f1       	breq	.+72     	; 0x5aa <DIO_setPortDirection+0x6c>
 562:	2b 81       	ldd	r18, Y+3	; 0x03
 564:	3c 81       	ldd	r19, Y+4	; 0x04
 566:	22 30       	cpi	r18, 0x02	; 2
 568:	31 05       	cpc	r19, r1
 56a:	2c f4       	brge	.+10     	; 0x576 <DIO_setPortDirection+0x38>
 56c:	8b 81       	ldd	r24, Y+3	; 0x03
 56e:	9c 81       	ldd	r25, Y+4	; 0x04
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	61 f0       	breq	.+24     	; 0x58c <DIO_setPortDirection+0x4e>
 574:	46 c0       	rjmp	.+140    	; 0x602 <DIO_setPortDirection+0xc4>
 576:	2b 81       	ldd	r18, Y+3	; 0x03
 578:	3c 81       	ldd	r19, Y+4	; 0x04
 57a:	22 30       	cpi	r18, 0x02	; 2
 57c:	31 05       	cpc	r19, r1
 57e:	21 f1       	breq	.+72     	; 0x5c8 <DIO_setPortDirection+0x8a>
 580:	8b 81       	ldd	r24, Y+3	; 0x03
 582:	9c 81       	ldd	r25, Y+4	; 0x04
 584:	83 30       	cpi	r24, 0x03	; 3
 586:	91 05       	cpc	r25, r1
 588:	71 f1       	breq	.+92     	; 0x5e6 <DIO_setPortDirection+0xa8>
 58a:	3b c0       	rjmp	.+118    	; 0x602 <DIO_setPortDirection+0xc4>
	{
	case PORT_A:
		if(portDirection == OUTPUT)
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	29 f4       	brne	.+10     	; 0x59c <DIO_setPortDirection+0x5e>
			SET_PORT_VALUE(DDRA_REG,0xFF);
 592:	ea e3       	ldi	r30, 0x3A	; 58
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	8f ef       	ldi	r24, 0xFF	; 255
 598:	80 83       	st	Z, r24
 59a:	33 c0       	rjmp	.+102    	; 0x602 <DIO_setPortDirection+0xc4>
		else if(portDirection == INPUT)
 59c:	8a 81       	ldd	r24, Y+2	; 0x02
 59e:	88 23       	and	r24, r24
 5a0:	81 f5       	brne	.+96     	; 0x602 <DIO_setPortDirection+0xc4>
			CLR_PORT(DDRA_REG);
 5a2:	ea e3       	ldi	r30, 0x3A	; 58
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	10 82       	st	Z, r1
 5a8:	2c c0       	rjmp	.+88     	; 0x602 <DIO_setPortDirection+0xc4>
		break;
	case PORT_B:
		if(portDirection == OUTPUT)
 5aa:	8a 81       	ldd	r24, Y+2	; 0x02
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	29 f4       	brne	.+10     	; 0x5ba <DIO_setPortDirection+0x7c>
			SET_PORT_VALUE(DDRB_REG,0xFF);
 5b0:	e7 e3       	ldi	r30, 0x37	; 55
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	8f ef       	ldi	r24, 0xFF	; 255
 5b6:	80 83       	st	Z, r24
 5b8:	24 c0       	rjmp	.+72     	; 0x602 <DIO_setPortDirection+0xc4>
		else if(portDirection == INPUT)
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	88 23       	and	r24, r24
 5be:	09 f5       	brne	.+66     	; 0x602 <DIO_setPortDirection+0xc4>
			CLR_PORT(DDRB_REG);
 5c0:	e7 e3       	ldi	r30, 0x37	; 55
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	10 82       	st	Z, r1
 5c6:	1d c0       	rjmp	.+58     	; 0x602 <DIO_setPortDirection+0xc4>
		break;
	case PORT_C:
		if(portDirection == OUTPUT)
 5c8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	29 f4       	brne	.+10     	; 0x5d8 <DIO_setPortDirection+0x9a>
			SET_PORT_VALUE(DDRC_REG,0xFF);
 5ce:	e4 e3       	ldi	r30, 0x34	; 52
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	8f ef       	ldi	r24, 0xFF	; 255
 5d4:	80 83       	st	Z, r24
 5d6:	15 c0       	rjmp	.+42     	; 0x602 <DIO_setPortDirection+0xc4>
		else if(portDirection == INPUT)
 5d8:	8a 81       	ldd	r24, Y+2	; 0x02
 5da:	88 23       	and	r24, r24
 5dc:	91 f4       	brne	.+36     	; 0x602 <DIO_setPortDirection+0xc4>
			CLR_PORT(DDRC_REG);
 5de:	e4 e3       	ldi	r30, 0x34	; 52
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	10 82       	st	Z, r1
 5e4:	0e c0       	rjmp	.+28     	; 0x602 <DIO_setPortDirection+0xc4>
		break;
	case PORT_D:
		if(portDirection == OUTPUT)
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	29 f4       	brne	.+10     	; 0x5f6 <DIO_setPortDirection+0xb8>
			SET_PORT_VALUE(DDRD_REG,0xFF);
 5ec:	e1 e3       	ldi	r30, 0x31	; 49
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	8f ef       	ldi	r24, 0xFF	; 255
 5f2:	80 83       	st	Z, r24
 5f4:	06 c0       	rjmp	.+12     	; 0x602 <DIO_setPortDirection+0xc4>
		else if(portDirection == INPUT)
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	88 23       	and	r24, r24
 5fa:	19 f4       	brne	.+6      	; 0x602 <DIO_setPortDirection+0xc4>
			CLR_PORT(DDRD_REG);
 5fc:	e1 e3       	ldi	r30, 0x31	; 49
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	10 82       	st	Z, r1
		break;
	}
}
 602:	0f 90       	pop	r0
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	cf 91       	pop	r28
 60c:	df 91       	pop	r29
 60e:	08 95       	ret

00000610 <DIO_setPortValue>:



void DIO_setPortValue(u8 portNumber , u8 portValue)
{
 610:	df 93       	push	r29
 612:	cf 93       	push	r28
 614:	00 d0       	rcall	.+0      	; 0x616 <DIO_setPortValue+0x6>
 616:	00 d0       	rcall	.+0      	; 0x618 <DIO_setPortValue+0x8>
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
 61c:	89 83       	std	Y+1, r24	; 0x01
 61e:	6a 83       	std	Y+2, r22	; 0x02
	switch(portNumber)
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	28 2f       	mov	r18, r24
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	3c 83       	std	Y+4, r19	; 0x04
 628:	2b 83       	std	Y+3, r18	; 0x03
 62a:	8b 81       	ldd	r24, Y+3	; 0x03
 62c:	9c 81       	ldd	r25, Y+4	; 0x04
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	91 05       	cpc	r25, r1
 632:	21 f1       	breq	.+72     	; 0x67c <DIO_setPortValue+0x6c>
 634:	2b 81       	ldd	r18, Y+3	; 0x03
 636:	3c 81       	ldd	r19, Y+4	; 0x04
 638:	22 30       	cpi	r18, 0x02	; 2
 63a:	31 05       	cpc	r19, r1
 63c:	2c f4       	brge	.+10     	; 0x648 <DIO_setPortValue+0x38>
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	9c 81       	ldd	r25, Y+4	; 0x04
 642:	00 97       	sbiw	r24, 0x00	; 0
 644:	61 f0       	breq	.+24     	; 0x65e <DIO_setPortValue+0x4e>
 646:	46 c0       	rjmp	.+140    	; 0x6d4 <DIO_setPortValue+0xc4>
 648:	2b 81       	ldd	r18, Y+3	; 0x03
 64a:	3c 81       	ldd	r19, Y+4	; 0x04
 64c:	22 30       	cpi	r18, 0x02	; 2
 64e:	31 05       	cpc	r19, r1
 650:	21 f1       	breq	.+72     	; 0x69a <DIO_setPortValue+0x8a>
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	9c 81       	ldd	r25, Y+4	; 0x04
 656:	83 30       	cpi	r24, 0x03	; 3
 658:	91 05       	cpc	r25, r1
 65a:	71 f1       	breq	.+92     	; 0x6b8 <DIO_setPortValue+0xa8>
 65c:	3b c0       	rjmp	.+118    	; 0x6d4 <DIO_setPortValue+0xc4>
	{
	case PORT_A:
		if(portValue)
 65e:	8a 81       	ldd	r24, Y+2	; 0x02
 660:	88 23       	and	r24, r24
 662:	29 f0       	breq	.+10     	; 0x66e <DIO_setPortValue+0x5e>
			SET_PORT_VALUE(PORTA_REG,portValue);
 664:	eb e3       	ldi	r30, 0x3B	; 59
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	8a 81       	ldd	r24, Y+2	; 0x02
 66a:	80 83       	st	Z, r24
 66c:	33 c0       	rjmp	.+102    	; 0x6d4 <DIO_setPortValue+0xc4>
		else if(portValue == LOW)
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	88 23       	and	r24, r24
 672:	81 f5       	brne	.+96     	; 0x6d4 <DIO_setPortValue+0xc4>
			CLR_PORT(PORTA_REG);
 674:	eb e3       	ldi	r30, 0x3B	; 59
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	10 82       	st	Z, r1
 67a:	2c c0       	rjmp	.+88     	; 0x6d4 <DIO_setPortValue+0xc4>
		break;
	case PORT_B:
		if(portValue)
 67c:	8a 81       	ldd	r24, Y+2	; 0x02
 67e:	88 23       	and	r24, r24
 680:	29 f0       	breq	.+10     	; 0x68c <DIO_setPortValue+0x7c>
			SET_PORT_VALUE(PORTB_REG,portValue);
 682:	e8 e3       	ldi	r30, 0x38	; 56
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	8a 81       	ldd	r24, Y+2	; 0x02
 688:	80 83       	st	Z, r24
 68a:	24 c0       	rjmp	.+72     	; 0x6d4 <DIO_setPortValue+0xc4>
		else if(portValue == LOW)
 68c:	8a 81       	ldd	r24, Y+2	; 0x02
 68e:	88 23       	and	r24, r24
 690:	09 f5       	brne	.+66     	; 0x6d4 <DIO_setPortValue+0xc4>
			CLR_PORT(PORTB_REG);
 692:	e8 e3       	ldi	r30, 0x38	; 56
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	10 82       	st	Z, r1
 698:	1d c0       	rjmp	.+58     	; 0x6d4 <DIO_setPortValue+0xc4>
		break;
	case PORT_C:
		if(portValue)
 69a:	8a 81       	ldd	r24, Y+2	; 0x02
 69c:	88 23       	and	r24, r24
 69e:	29 f0       	breq	.+10     	; 0x6aa <DIO_setPortValue+0x9a>
			SET_PORT_VALUE(PORTC_REG,portValue);
 6a0:	e5 e3       	ldi	r30, 0x35	; 53
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	8a 81       	ldd	r24, Y+2	; 0x02
 6a6:	80 83       	st	Z, r24
 6a8:	15 c0       	rjmp	.+42     	; 0x6d4 <DIO_setPortValue+0xc4>
		else if(portValue == LOW)
 6aa:	8a 81       	ldd	r24, Y+2	; 0x02
 6ac:	88 23       	and	r24, r24
 6ae:	91 f4       	brne	.+36     	; 0x6d4 <DIO_setPortValue+0xc4>
			CLR_PORT(PORTC_REG);
 6b0:	e5 e3       	ldi	r30, 0x35	; 53
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	10 82       	st	Z, r1
 6b6:	0e c0       	rjmp	.+28     	; 0x6d4 <DIO_setPortValue+0xc4>
		break;
	case PORT_D:
		if(portValue)
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	88 23       	and	r24, r24
 6bc:	29 f0       	breq	.+10     	; 0x6c8 <DIO_setPortValue+0xb8>
			SET_PORT_VALUE(PORTD_REG,portValue);
 6be:	e2 e3       	ldi	r30, 0x32	; 50
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	80 83       	st	Z, r24
 6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <DIO_setPortValue+0xc4>
		else if(portValue == LOW)
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	88 23       	and	r24, r24
 6cc:	19 f4       	brne	.+6      	; 0x6d4 <DIO_setPortValue+0xc4>
			CLR_PORT(PORTD_REG);
 6ce:	e2 e3       	ldi	r30, 0x32	; 50
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	10 82       	st	Z, r1
		break;
	}
}
 6d4:	0f 90       	pop	r0
 6d6:	0f 90       	pop	r0
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	cf 91       	pop	r28
 6de:	df 91       	pop	r29
 6e0:	08 95       	ret

000006e2 <DIO_getPinValue>:



u8 DIO_getPinValue(u8 portNumber , u8 pinNumber )
{
 6e2:	df 93       	push	r29
 6e4:	cf 93       	push	r28
 6e6:	00 d0       	rcall	.+0      	; 0x6e8 <DIO_getPinValue+0x6>
 6e8:	00 d0       	rcall	.+0      	; 0x6ea <DIO_getPinValue+0x8>
 6ea:	0f 92       	push	r0
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
 6f0:	89 83       	std	Y+1, r24	; 0x01
 6f2:	6a 83       	std	Y+2, r22	; 0x02
	switch(portNumber)
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	28 2f       	mov	r18, r24
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	3d 83       	std	Y+5, r19	; 0x05
 6fc:	2c 83       	std	Y+4, r18	; 0x04
 6fe:	8c 81       	ldd	r24, Y+4	; 0x04
 700:	9d 81       	ldd	r25, Y+5	; 0x05
 702:	81 30       	cpi	r24, 0x01	; 1
 704:	91 05       	cpc	r25, r1
 706:	39 f1       	breq	.+78     	; 0x756 <DIO_getPinValue+0x74>
 708:	2c 81       	ldd	r18, Y+4	; 0x04
 70a:	3d 81       	ldd	r19, Y+5	; 0x05
 70c:	22 30       	cpi	r18, 0x02	; 2
 70e:	31 05       	cpc	r19, r1
 710:	2c f4       	brge	.+10     	; 0x71c <DIO_getPinValue+0x3a>
 712:	8c 81       	ldd	r24, Y+4	; 0x04
 714:	9d 81       	ldd	r25, Y+5	; 0x05
 716:	00 97       	sbiw	r24, 0x00	; 0
 718:	61 f0       	breq	.+24     	; 0x732 <DIO_getPinValue+0x50>
 71a:	53 c0       	rjmp	.+166    	; 0x7c2 <DIO_getPinValue+0xe0>
 71c:	2c 81       	ldd	r18, Y+4	; 0x04
 71e:	3d 81       	ldd	r19, Y+5	; 0x05
 720:	22 30       	cpi	r18, 0x02	; 2
 722:	31 05       	cpc	r19, r1
 724:	51 f1       	breq	.+84     	; 0x77a <DIO_getPinValue+0x98>
 726:	8c 81       	ldd	r24, Y+4	; 0x04
 728:	9d 81       	ldd	r25, Y+5	; 0x05
 72a:	83 30       	cpi	r24, 0x03	; 3
 72c:	91 05       	cpc	r25, r1
 72e:	b9 f1       	breq	.+110    	; 0x79e <DIO_getPinValue+0xbc>
 730:	48 c0       	rjmp	.+144    	; 0x7c2 <DIO_getPinValue+0xe0>
		{
		case PORT_A:
			return BIT_IS_SET(PINA_REG,pinNumber);
 732:	e9 e3       	ldi	r30, 0x39	; 57
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	48 2f       	mov	r20, r24
 73a:	8a 81       	ldd	r24, Y+2	; 0x02
 73c:	28 2f       	mov	r18, r24
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	02 2e       	mov	r0, r18
 746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_getPinValue+0x6a>
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	0a 94       	dec	r0
 74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_getPinValue+0x66>
 750:	84 23       	and	r24, r20
 752:	8b 83       	std	Y+3, r24	; 0x03
 754:	37 c0       	rjmp	.+110    	; 0x7c4 <DIO_getPinValue+0xe2>
		case PORT_B:
			return BIT_IS_SET(PINB_REG,pinNumber);
 756:	e6 e3       	ldi	r30, 0x36	; 54
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	48 2f       	mov	r20, r24
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	28 2f       	mov	r18, r24
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	02 2e       	mov	r0, r18
 76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_getPinValue+0x8e>
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	0a 94       	dec	r0
 772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_getPinValue+0x8a>
 774:	84 23       	and	r24, r20
 776:	8b 83       	std	Y+3, r24	; 0x03
 778:	25 c0       	rjmp	.+74     	; 0x7c4 <DIO_getPinValue+0xe2>
		case PORT_C:
			return BIT_IS_SET(PINC_REG,pinNumber);
 77a:	e3 e3       	ldi	r30, 0x33	; 51
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	80 81       	ld	r24, Z
 780:	48 2f       	mov	r20, r24
 782:	8a 81       	ldd	r24, Y+2	; 0x02
 784:	28 2f       	mov	r18, r24
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	02 2e       	mov	r0, r18
 78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_getPinValue+0xb2>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	0a 94       	dec	r0
 796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_getPinValue+0xae>
 798:	84 23       	and	r24, r20
 79a:	8b 83       	std	Y+3, r24	; 0x03
 79c:	13 c0       	rjmp	.+38     	; 0x7c4 <DIO_getPinValue+0xe2>
		case PORT_D:
			return BIT_IS_SET(PIND_REG,pinNumber);
 79e:	e0 e3       	ldi	r30, 0x30	; 48
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	48 2f       	mov	r20, r24
 7a6:	8a 81       	ldd	r24, Y+2	; 0x02
 7a8:	28 2f       	mov	r18, r24
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 2e       	mov	r0, r18
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_getPinValue+0xd6>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	0a 94       	dec	r0
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_getPinValue+0xd2>
 7bc:	84 23       	and	r24, r20
 7be:	8b 83       	std	Y+3, r24	; 0x03
 7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <DIO_getPinValue+0xe2>
		}
return 0 ;
 7c2:	1b 82       	std	Y+3, r1	; 0x03
 7c4:	8b 81       	ldd	r24, Y+3	; 0x03
}
 7c6:	0f 90       	pop	r0
 7c8:	0f 90       	pop	r0
 7ca:	0f 90       	pop	r0
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	cf 91       	pop	r28
 7d2:	df 91       	pop	r29
 7d4:	08 95       	ret

000007d6 <__vector_9>:

void timer_init(void);


ISR(TIMER0_OVF_vect)
{
 7d6:	1f 92       	push	r1
 7d8:	0f 92       	push	r0
 7da:	0f b6       	in	r0, 0x3f	; 63
 7dc:	0f 92       	push	r0
 7de:	11 24       	eor	r1, r1
 7e0:	8f 93       	push	r24
 7e2:	df 93       	push	r29
 7e4:	cf 93       	push	r28
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
	static u8 ticks = 0 ;
	ticks++;
 7ea:	80 91 61 00 	lds	r24, 0x0061
 7ee:	8f 5f       	subi	r24, 0xFF	; 255
 7f0:	80 93 61 00 	sts	0x0061, r24
	if(ticks==NUMBER_OF_OVF_PER_SECOND)
 7f4:	80 91 61 00 	lds	r24, 0x0061
 7f8:	84 30       	cpi	r24, 0x04	; 4
 7fa:	69 f4       	brne	.+26     	; 0x816 <__vector_9+0x40>
	{
		output_value++;
 7fc:	80 91 60 00 	lds	r24, 0x0060
 800:	8f 5f       	subi	r24, 0xFF	; 255
 802:	80 93 60 00 	sts	0x0060, r24
		if(output_value==10)
 806:	80 91 60 00 	lds	r24, 0x0060
 80a:	8a 30       	cpi	r24, 0x0A	; 10
 80c:	11 f4       	brne	.+4      	; 0x812 <__vector_9+0x3c>
			output_value=0;
 80e:	10 92 60 00 	sts	0x0060, r1
		ticks=0;
 812:	10 92 61 00 	sts	0x0061, r1
	}
}
 816:	cf 91       	pop	r28
 818:	df 91       	pop	r29
 81a:	8f 91       	pop	r24
 81c:	0f 90       	pop	r0
 81e:	0f be       	out	0x3f, r0	; 63
 820:	0f 90       	pop	r0
 822:	1f 90       	pop	r1
 824:	18 95       	reti

00000826 <main>:

int main()
{
 826:	df 93       	push	r29
 828:	cf 93       	push	r28
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
    DIO_setPortDirection(PORT_C , OUTPUT);   // configure PORTC pins as output
 82e:	82 e0       	ldi	r24, 0x02	; 2
 830:	61 e0       	ldi	r22, 0x01	; 1
 832:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_setPortDirection>
    DIO_setPortValue(PORT_C , 0);  			 // initialize all PORTC pins as low so the 7-segment displays 0 at first
 836:	82 e0       	ldi	r24, 0x02	; 2
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	0e 94 08 03 	call	0x610	; 0x610 <DIO_setPortValue>

	timer_init();   //timer configuration
 83e:	0e 94 28 04 	call	0x850	; 0x850 <timer_init>

	while(1)
	{
		DIO_setPortValue(PORT_C , output_value);
 842:	90 91 60 00 	lds	r25, 0x0060
 846:	82 e0       	ldi	r24, 0x02	; 2
 848:	69 2f       	mov	r22, r25
 84a:	0e 94 08 03 	call	0x610	; 0x610 <DIO_setPortValue>
 84e:	f9 cf       	rjmp	.-14     	; 0x842 <main+0x1c>

00000850 <timer_init>:
	return 0;
}


void timer_init(void)
{
 850:	df 93       	push	r29
 852:	cf 93       	push	r28
 854:	cd b7       	in	r28, 0x3d	; 61
 856:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(STATUS_REG,7);	//Enable global interrupt pin
 858:	af e5       	ldi	r26, 0x5F	; 95
 85a:	b0 e0       	ldi	r27, 0x00	; 0
 85c:	ef e5       	ldi	r30, 0x5F	; 95
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	80 68       	ori	r24, 0x80	; 128
 864:	8c 93       	st	X, r24
	TCNT0_REG=0;			//initialize the counter
 866:	e2 e5       	ldi	r30, 0x52	; 82
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	10 82       	st	Z, r1
	SET_BIT(TIMSK_REG,0);	//Enable Overflow interrupt
 86c:	a9 e5       	ldi	r26, 0x59	; 89
 86e:	b0 e0       	ldi	r27, 0x00	; 0
 870:	e9 e5       	ldi	r30, 0x59	; 89
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	81 60       	ori	r24, 0x01	; 1
 878:	8c 93       	st	X, r24

	/* Configure the timer control register*/
	SET_BIT(TCCR0_REG,7);	// Non PWM mode FOC0=1
 87a:	a3 e5       	ldi	r26, 0x53	; 83
 87c:	b0 e0       	ldi	r27, 0x00	; 0
 87e:	e3 e5       	ldi	r30, 0x53	; 83
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	80 81       	ld	r24, Z
 884:	80 68       	ori	r24, 0x80	; 128
 886:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);		//prescaler =(1024) CS00=1 CS01=0 CS02=1
 888:	a3 e5       	ldi	r26, 0x53	; 83
 88a:	b0 e0       	ldi	r27, 0x00	; 0
 88c:	e3 e5       	ldi	r30, 0x53	; 83
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	80 81       	ld	r24, Z
 892:	81 60       	ori	r24, 0x01	; 1
 894:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);		//prescaler =(1024) CS00=1 CS01=0 CS02=1
 896:	a3 e5       	ldi	r26, 0x53	; 83
 898:	b0 e0       	ldi	r27, 0x00	; 0
 89a:	e3 e5       	ldi	r30, 0x53	; 83
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	84 60       	ori	r24, 0x04	; 4
 8a2:	8c 93       	st	X, r24

}
 8a4:	cf 91       	pop	r28
 8a6:	df 91       	pop	r29
 8a8:	08 95       	ret

000008aa <_exit>:
 8aa:	f8 94       	cli

000008ac <__stop_program>:
 8ac:	ff cf       	rjmp	.-2      	; 0x8ac <__stop_program>
